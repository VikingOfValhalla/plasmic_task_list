// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fzMachqKCt3KzM1mz3Si3e
// Component: jSrioS_Omt

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: jWYvdFuD-Ys/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_todo_app.module.css"; // plasmic-import: fzMachqKCt3KzM1mz3Si3e/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: jSrioS_Omt/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  link?: p.Flex<"a">;
  completed?: p.Flex<"a">;
  form?: p.Flex<"form">;
  task?: p.Flex<typeof AntdTextArea>;
  button?: p.Flex<typeof AntdButton>;
  table?: p.Flex<typeof RichTable>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "task.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate: swrMutate } = usePlasmicDataConfig();
  const mutate = swrMutate;

  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "p7grtHiSaQSVmhAoysUCZR",
            opId: "2fdf332b-ffaf-4f4b-9cd0-ca2db0da6c9f",
            userArgs: {},
            cacheKey: "plasmic.$.1LD0Ybdr5.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tp4Jg
                )}
              >
                {"ToDo List"}
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__am9ZC)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            }
            itemsGap={8 as const}
            menuItems={
              <React.Fragment>
                <a
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["airtableGetList"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "dataSourceOp",
                                interactionUuid: "F-F-cxtTy",
                                componentUuid: "jSrioS_Omt",
                                argName: "dataOp"
                              },
                              () => ({
                                sourceId: "p7grtHiSaQSVmhAoysUCZR",
                                opId: "7e307cc3-2b32-4c11-accb-674f38e18b4a",
                                userArgs: {},
                                cacheKey: null,
                                invalidatedKeys: null,
                                roleId: null
                              })
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "dataSourceOp",
                              interactionUuid: "F-F-cxtTy",
                              componentUuid: "jSrioS_Omt"
                            },
                            () =>
                              (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  if (
                                    dataOp.invalidatedKeys &&
                                    dataOp.invalidatedKeys.find(
                                      key => key === "plasmic_refresh_all"
                                    )
                                  ) {
                                    await Promise.all(
                                      Array.from(cache.keys()).map(async key =>
                                        mutate(key)
                                      )
                                    );

                                    return response;
                                  }
                                  if (dataOp.invalidatedKeys) {
                                    await Promise.all(
                                      dataOp.invalidatedKeys.map(
                                        async invalidateKey =>
                                          Promise.all(
                                            Array.from(cache.keys()).map(
                                              async key => {
                                                if (
                                                  typeof key === "string" &&
                                                  key.includes(
                                                    `.$.${invalidateKey}.$.`
                                                  )
                                                ) {
                                                  return mutate(key);
                                                }
                                                return Promise.resolve();
                                              }
                                            )
                                          )
                                      )
                                    );
                                  }
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["airtableGetList"] === "object" &&
                      typeof $steps["airtableGetList"].then === "function"
                    ) {
                      $steps["airtableGetList"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "dataSourceOp",
                          interactionUuid: "F-F-cxtTy",
                          componentUuid: "jSrioS_Omt"
                        },
                        $steps["airtableGetList"]
                      );
                    }
                  }}
                >
                  {"Current List"}
                </a>
                <a
                  data-plasmic-name={"completed"}
                  data-plasmic-override={overrides.completed}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.completed
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["airtableGetList"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "dataSourceOp",
                                interactionUuid: "IiQo9pIei",
                                componentUuid: "jSrioS_Omt",
                                argName: "dataOp"
                              },
                              () => ({
                                sourceId: "p7grtHiSaQSVmhAoysUCZR",
                                opId: "699a407b-5eaa-458a-a07d-9521c6096881",
                                userArgs: {},
                                cacheKey: null,
                                invalidatedKeys: null,
                                roleId: null
                              })
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "dataSourceOp",
                              interactionUuid: "IiQo9pIei",
                              componentUuid: "jSrioS_Omt"
                            },
                            () =>
                              (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  if (
                                    dataOp.invalidatedKeys &&
                                    dataOp.invalidatedKeys.find(
                                      key => key === "plasmic_refresh_all"
                                    )
                                  ) {
                                    await Promise.all(
                                      Array.from(cache.keys()).map(async key =>
                                        mutate(key)
                                      )
                                    );

                                    return response;
                                  }
                                  if (dataOp.invalidatedKeys) {
                                    await Promise.all(
                                      dataOp.invalidatedKeys.map(
                                        async invalidateKey =>
                                          Promise.all(
                                            Array.from(cache.keys()).map(
                                              async key => {
                                                if (
                                                  typeof key === "string" &&
                                                  key.includes(
                                                    `.$.${invalidateKey}.$.`
                                                  )
                                                ) {
                                                  return mutate(key);
                                                }
                                                return Promise.resolve();
                                              }
                                            )
                                          )
                                      )
                                    );
                                  }
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["airtableGetList"] === "object" &&
                      typeof $steps["airtableGetList"].then === "function"
                    ) {
                      $steps["airtableGetList"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "dataSourceOp",
                          interactionUuid: "IiQo9pIei",
                          componentUuid: "jSrioS_Omt"
                        },
                        $steps["airtableGetList"]
                      );
                    }
                  }}
                >
                  {"Completed"}
                </a>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__kj285)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/menu.svg" as const}
              />
            }
            responsiveBreakpoint={768 as const}
          />

          <form
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            action={``}
            className={classNames(projectcss.all, sty.form)}
            method={"post" as const}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.task),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["task", "value"],
                  AntdTextArea_Helpers
                ),
                placeholder: "Please enter a task..." as const,
                value: p.generateStateValueProp($state, ["task", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "task.value"
                  }
                ],
                [],
                AntdTextArea_Helpers ?? {},
                child$Props
              );

              return (
                <AntdTextArea
                  data-plasmic-name={"task"}
                  data-plasmic-override={overrides.task}
                  {...child$Props}
                />
              );
            })()}
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async () => {
                const $steps = {};
                $steps["airtableCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "dataSourceOp",
                            interactionUuid: "Wf7L5pIOt",
                            componentUuid: "jSrioS_Omt",
                            argName: "dataOp"
                          },
                          () => ({
                            sourceId: "p7grtHiSaQSVmhAoysUCZR",
                            opId: "c0311fbb-092a-43cf-bb8d-1b49580d09fa",
                            userArgs: {
                              variables: [$state.task.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          })
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "dataSourceOp",
                          interactionUuid: "Wf7L5pIOt",
                          componentUuid: "jSrioS_Omt"
                        },
                        () =>
                          (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              if (
                                dataOp.invalidatedKeys &&
                                dataOp.invalidatedKeys.find(
                                  key => key === "plasmic_refresh_all"
                                )
                              ) {
                                await Promise.all(
                                  Array.from(cache.keys()).map(async key =>
                                    mutate(key)
                                  )
                                );

                                return response;
                              }
                              if (dataOp.invalidatedKeys) {
                                await Promise.all(
                                  dataOp.invalidatedKeys.map(
                                    async invalidateKey =>
                                      Promise.all(
                                        Array.from(cache.keys()).map(
                                          async key => {
                                            if (
                                              typeof key === "string" &&
                                              key.includes(
                                                `.$.${invalidateKey}.$.`
                                              )
                                            ) {
                                              return mutate(key);
                                            }
                                            return Promise.resolve();
                                          }
                                        )
                                      )
                                  )
                                );
                              }
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["airtableCreate"] === "object" &&
                  typeof $steps["airtableCreate"].then === "function"
                ) {
                  $steps["airtableCreate"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "dataSourceOp",
                      interactionUuid: "Wf7L5pIOt",
                      componentUuid: "jSrioS_Omt"
                    },
                    $steps["airtableCreate"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m5Jlr
                )}
              >
                {"Click to add task"}
              </div>
            </AntdButton>
          </form>
          {(() => {
            const child$Props = {
              canSelectRows: "none" as const,
              className: classNames("__wab_instance", sty.table),
              data: (() => {
                try {
                  return $queries.query;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              fields: (() => {
                const __composite = [
                  {
                    key: "__airtable_id",
                    fieldId: "__airtable_id",
                    isHidden: null
                  },
                  {
                    key: "Number",
                    fieldId: "Number",
                    dataType: null,
                    maximumFractionDigits: null
                  },
                  {
                    key: "Description",
                    fieldId: "Description",
                    dataType: null
                  },
                  {
                    key: "Completed",
                    fieldId: "Completed",
                    dataType: null,
                    showAs: null,
                    title: null
                  }
                ];
                __composite["0"]["isHidden"] = true;
                __composite["1"]["dataType"] = "number";
                __composite["1"]["maximumFractionDigits"] = 0;
                __composite["2"]["dataType"] = "string";
                __composite["3"]["dataType"] = "boolean";
                __composite["3"]["showAs"] = "switch";
                __composite["3"]["title"] = "Completed";
                return __composite;
              })(),

              onRowClick: async (rowKey, row, event) => {
                const $steps = {};
                $steps["airtableUpdateById"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "dataSourceOp",
                            interactionUuid: "l17r28CmS",
                            componentUuid: "jSrioS_Omt",
                            argName: "dataOp"
                          },
                          () => ({
                            sourceId: "p7grtHiSaQSVmhAoysUCZR",
                            opId: "2bd5a585-149e-4f74-800d-abf8ad4c04ed",
                            userArgs: {
                              id: [rowKey],
                              variables: [
                                String(
                                  $queries.query.data.reduce(e => {
                                    console.log({
                                      airtable_id: e.__airtable_id,
                                      rowKey: rowKey
                                    });
                                    if (e.__airtable_id == rowKey) {
                                      console.log(e.Completed);
                                      // e.Completed = e.Completed === "false" ? "false" : "true"
                                      console.log(e.Completed);
                                      return e;
                                    } else {
                                      console.log("return statement");
                                      return e;
                                    }
                                  }).Completed
                                )
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          })
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "dataSourceOp",
                          interactionUuid: "l17r28CmS",
                          componentUuid: "jSrioS_Omt"
                        },
                        () =>
                          (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              if (
                                dataOp.invalidatedKeys &&
                                dataOp.invalidatedKeys.find(
                                  key => key === "plasmic_refresh_all"
                                )
                              ) {
                                await Promise.all(
                                  Array.from(cache.keys()).map(async key =>
                                    mutate(key)
                                  )
                                );

                                return response;
                              }
                              if (dataOp.invalidatedKeys) {
                                await Promise.all(
                                  dataOp.invalidatedKeys.map(
                                    async invalidateKey =>
                                      Promise.all(
                                        Array.from(cache.keys()).map(
                                          async key => {
                                            if (
                                              typeof key === "string" &&
                                              key.includes(
                                                `.$.${invalidateKey}.$.`
                                              )
                                            ) {
                                              return mutate(key);
                                            }
                                            return Promise.resolve();
                                          }
                                        )
                                      )
                                  )
                                );
                              }
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["airtableUpdateById"] === "object" &&
                  typeof $steps["airtableUpdateById"].then === "function"
                ) {
                  $steps["airtableUpdateById"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "dataSourceOp",
                      interactionUuid: "l17r28CmS",
                      componentUuid: "jSrioS_Omt"
                    },
                    $steps["airtableUpdateById"]
                  );
                }
              },
              onRowSelectionChanged: async (...eventArgs) => {
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["table", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["table", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["table", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKeys",
                  ["table", "selectedRowKeys"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              rowActions: [],
              scopeClassName: sty["table__instance"],
              selectedRowKey: p.generateStateValueProp($state, [
                "table",
                "selectedRowKey"
              ]),
              selectedRowKeys: p.generateStateValueProp($state, [
                "table",
                "selectedRowKeys"
              ]),
              themeResetClassName: classNames(
                projectcss.root_reset,
                projectcss.root_reset_tags,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )
            };
            p.initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "table.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "table.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "table.selectedRows"
                },
                {
                  name: "selectedRowKeys",
                  plasmicStateName: "table.selectedRowKeys"
                }
              ],
              [],
              RichTable_Helpers ?? {},
              child$Props
            );

            return (
              <RichTable
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "link",
    "completed",
    "form",
    "task",
    "button",
    "table"
  ],
  navigationBar: ["navigationBar", "link", "completed"],
  link: ["link"],
  completed: ["completed"],
  form: ["form", "task", "button"],
  task: ["task"],
  button: ["button"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link: "a";
  completed: "a";
  form: "form";
  task: typeof AntdTextArea;
  button: typeof AntdButton;
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    completed: makeNodeComponent("completed"),
    form: makeNodeComponent("form"),
    task: makeNodeComponent("task"),
    button: makeNodeComponent("button"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Completed Tasks",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
